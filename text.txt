#include<cstdio>
#include<algorithm>
using namespace std;

const int MAX_N = 100005;
const int MAX_M = 1000005;
class edge {
public:
    int from;
    int to;
    long long a;
    long long b;
    long long length;
    int next;
    edge(){};
    edge(int f, int t, long long i, long long j, int n):
    from(f), to(t), a(i), b(j), next(n){
        length = a;
    };

};
bool operator< (edge a, edge b) {
    return a.length < b.length;
}
edge edges[MAX_M];
int a[MAX_M], b[MAX_M];
int head[MAX_N];
int n, m, cnt=1;
long long res;

void read(){
    scanf("%d%d",&n, &m);
    int s, t, a, b;
    for(int i = 1; i<=m; i++){
        scanf("%d%d%d%d", &s,&t,&a,&b);
        edges[cnt] = edge(s, t, a, b, head[s]);
        head[s] = cnt;
        edges[cnt+m] = edge(t, s, a, b, head[t]);
        head[t] = cnt+m;
        cnt++;
    }
}

int vis[MAX_N], low[MAX_N], fa[MAX_N];
int vis_n = 1;

void cutedge(int v, int i) {
    int e = head[v];
    while(e) {
        if(!vis[edges[e].to]){
            vis[edges[e].to] = low[edges[e].to] = vis_n++;
            // printf("%d, %d\n", edges[e].from, edges[e].to);
            cutedge(edges[e].to, e);
            low[v] = min(low[v], low[edges[e].to]);
            int x = e-m<=0? e+m: e-m;
           
            if(low[edges[e].to]>vis[v]){
                edges[e].length = edges[x].length = edges[e].b;
                
            } else {
                edges[e].length = edges[x].length = edges[e].a;
            }
        } else if(e!=i+m && e!= i-m) {
            low[v] = min(low[v], vis[edges[e].to]);
        }
        e = edges[e].next;
    }
}

int find(int a) {
    if(fa[a] == a){
        return a;
    } else {
        return fa[a] = find(fa[a]);
    }
}

void krus() {
    for(int i = 1; i<=n; i++) {
        fa[i] = i;
    }
    for(int i = 1; i<=m; i++) {
        // printf("%d, %d\n", edges[i].from, edges[i].to);
        if(find(edges[i].from) != find(edges[i].to)) {
            
            fa[find(edges[i].from)] = find(edges[i].to);
            res += edges[i].length;
        }
    }
}

int main(){
    read();
    cutedge(1, -m);
    sort(edges+1, edges+m+1);
    krus();
    printf("%lld", res);
    return 0;
}